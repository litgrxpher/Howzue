// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview This file contains a Genkit flow that generates AI companion responses to user journal entries.
 *
 * - generateAiCompanionResponse - A function that generates an AI companion response.
 * - GenerateAiCompanionResponseInput - The input type for the generateAiCompanionResponse function.
 * - GenerateAiCompanionResponseOutput - The return type for the generateAiCompanionResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateAiCompanionResponseInputSchema = z.object({
  journalEntry: z.string().describe('The user journal entry to respond to.'),
});

export type GenerateAiCompanionResponseInput = z.infer<typeof GenerateAiCompanionResponseInputSchema>;

const GenerateAiCompanionResponseOutputSchema = z.object({
  aiResponse: z.string().describe('The AI companion response to the journal entry.'),
});

export type GenerateAiCompanionResponseOutput = z.infer<typeof GenerateAiCompanionResponseOutputSchema>;

export async function generateAiCompanionResponse(input: GenerateAiCompanionResponseInput): Promise<GenerateAiCompanionResponseOutput> {
  return generateAiCompanionResponseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateAiCompanionResponsePrompt',
  input: {schema: GenerateAiCompanionResponseInputSchema},
  output: {schema: GenerateAiCompanionResponseOutputSchema},
  prompt: `You are an AI companion designed to provide thoughtful and supportive responses to user journal entries.

  Respond to the following journal entry with empathy and understanding, offering insights and reflections to help the user gain a deeper understanding of their emotions. Only respond to emotional or reflective topics. If the journal entry does not contain emotional or reflective topics, respond that you can only respond to emotional or reflective topics. If the user expresses thoughts of self-harm or harm to others, suggest that they seek help from a crisis hotline or mental health professional.

  Journal Entry:
  {{journalEntry}}

  AI Companion Response:`, // Ensure output is plain text
});

const generateAiCompanionResponseFlow = ai.defineFlow(
  {
    name: 'generateAiCompanionResponseFlow',
    inputSchema: GenerateAiCompanionResponseInputSchema,
    outputSchema: GenerateAiCompanionResponseOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
